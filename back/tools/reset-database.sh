#!/usr/bin/env bash

set -e
set -o pipefail

# Couleurs ANSI
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[0;33m'
CYAN='\033[0;36m'
NC='\033[0m' # No Color (reset)

REQUIRED_ENV_VARS=("ENVIRONMENT" "DORA_BACK_STAGING_REGION" "DORA_BACK_STAGING_APP" "DORA_BACK_STAGING_ADDON" "DATABASE_URL" "SCALINGO_API_TOKEN")

echo -e "${CYAN}üîç V√©rification de l'environnement‚Ä¶${NC}"
if [ "${ENVIRONMENT}" != "review" ];then
  echo -e "${RED}‚ùå La r√©initialisation de la base de donn√©es ne peut se faire que sur une review app.${NC}"
  exit 0;
fi
echo ""

echo -e "${CYAN}üîß V√©rification des variables d'environnement‚Ä¶${NC}"
for var in "${REQUIRED_ENV_VARS[@]}"; do
  if [ -z "${!var}" ]; then
    echo -e "${RED}‚ùå La variable d'environnement $var n'est pas d√©finie.${NC}"
    exit 1
  fi
done
echo ""

if command -v dbclient-fetcher &>/dev/null; then
  echo -e "${CYAN}üêò Installation des outils PostgreSQL‚Ä¶${NC}"
  dbclient-fetcher pgsql
  echo ""
elif ! command -v pg_restore &> /dev/null; then
  echo -e "${RED}‚ùå pg_restore n'est pas install√©. Veuillez l'installer avant d'ex√©cuter ce script.${NC}"
  exit 1
fi

if command -v install-scalingo-cli &>/dev/null; then
  echo -e "${CYAN}‚¨áÔ∏è Installation de Scalingo CLI‚Ä¶${NC}"
  install-scalingo-cli
  echo ""
elif ! command -v scalingo &> /dev/null; then
  echo -e "${RED}‚ùå Scalingo CLI n'est pas install√©. Veuillez l'installer avant d'ex√©cuter ce script.${NC}"
  exit 1
fi

echo -e "${CYAN}üîê V√©rification de la connexion √† Scalingo‚Ä¶${NC}"
echo ""
if ! scalingo whoami; then
  echo -e "${CYAN}üîë Connexion √† Scalingo‚Ä¶${NC}"
  scalingo login --api-token "${SCALINGO_API_TOKEN}"
  echo ""
fi

echo -e "${CYAN}üìÇ Cr√©ation d'un r√©pertoire temporaire‚Ä¶${NC}"
temp_dir=$(mktemp -d)
echo -e "${YELLOW}‚Üí Utilisation du r√©pertoire temporaire : $temp_dir${NC}"
cd "$temp_dir"
echo ""

echo -e "${CYAN}üì• R√©cup√©ration de la derni√®re sauvegarde de staging‚Ä¶${NC}"
scalingo --region "${DORA_BACK_STAGING_REGION}" --app "${DORA_BACK_STAGING_APP}" --addon "${DORA_BACK_STAGING_ADDON}" backups-download
archive_filename=$(ls *.tar.gz)
echo -e "${YELLOW}‚Üí Fichier : $archive_filename${NC}"
echo ""

echo -e "${CYAN}üì¶ D√©compression de l'archive‚Ä¶${NC}"
tar -xzvf "$archive_filename"
decompressed_filename="${archive_filename%.tar.gz}.pgsql"
echo -e "${YELLOW}‚Üí Fichier : $decompressed_filename${NC}"
echo ""

echo -e "${CYAN}üîÑ Restauration des donn√©es‚Ä¶${NC}"
pg_restore --clean --if-exists --no-owner --no-privileges --no-comments --dbname "$DATABASE_URL" "$decompressed_filename"
echo ""

echo -e "${CYAN}üßπ Suppression du r√©pertoire temporaire‚Ä¶${NC}"
cd -
rm -rf "$temp_dir"
echo ""

echo -e "${GREEN}‚ú® Restauration des donn√©es termin√©e !${NC}"
