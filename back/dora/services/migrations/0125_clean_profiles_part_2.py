# Generated by Django 5.2.6 on 2025-09-18 14:32
import logging

from django.db import migrations

logger = logging.getLogger(__name__)


ACCESS_CONDITION_ETRE_ELIGIBLE_CRITERES_IAE = 1755  # Être éligible aux critères IAE
ACCESS_CONDITION_SALARIE_SIAE = 1756  # Salarié d'une SIAE
ACCESS_CONDITION_INSCRIT_MISSION_LOCALE = 1757  # Inscrit à la Mission Locale
ACCESS_CONDITION_RESIDENT_QPV_OU_ZRR = 1758  # Résident QPV / ZRR
ACCESS_CONDITION_PERSONNE_NON_IMPOSABLE = 1759  # Personne non imposable

PROFILE_CHANGES: dict[int, dict[str, list[int]]] = {
    1185: {
        "newProfileIds": (50,),
    },
    1226: {
        "newProfileIds": (50,),
    },
    925: {
        "newProfileIds": (51,),
    },
    693: {
        "newProfileIds": (51,),
    },
    690: {
        "newProfileIds": (51,),
    },
    1209: {
        "newProfileIds": (61,),
    },
    871: {
        "newProfileIds": (73,),
    },
    345: {
        "newProfileIds": (420,),
    },
    347: {
        "newProfileIds": (420,),
    },
    864: {
        "newProfileIds": (422,),
    },
    867: {
        "newProfileIds": (422,),
    },
    861: {
        "newProfileIds": (422,),
    },
    858: {
        "newProfileIds": (422,),
    },
    855: {
        "newProfileIds": (422,),
    },
    875: {
        "newProfileIds": (38,),
    },
    1083: {
        "newProfileIds": (38,),
    },
    1059: {
        "newProfileIds": (50,),
    },
    1261: {
        "newProfileIds": (
            50,
            56,
        ),
    },
    1131: {
        "newProfileIds": (
            50,
            61,
        ),
    },
    1184: {
        "newProfileIds": (28,),
    },
    342: {
        "newProfileIds": (73,),
    },
    982: {
        "newProfileIds": (67,),
    },
    983: {
        "newProfileIds": (67,),
    },
    1080: {
        "newProfileIds": (67,),
    },
    755: {
        "newProfileIds": (
            792,
            56,
        ),
    },
    366: {
        "newProfileIds": (6,),
    },
    268: {
        "newProfileIds": (51,),
        "accessConditionIds": (ACCESS_CONDITION_INSCRIT_MISSION_LOCALE),
    },
    215: {
        "newProfileIds": (51,),
        "accessConditionIds": (ACCESS_CONDITION_INSCRIT_MISSION_LOCALE),
    },
    407: {
        "newProfileIds": (422,),
    },
    408: {
        "newProfileIds": (
            47,
            422,
        ),
    },
    1060: {
        "newProfileIds": (
            47,
            422,
        ),
    },
    1112: {
        "newProfileIds": (18,),
    },
    158: {
        "newProfileIds": (61,),
    },
    409: {
        "newProfileIds": (422,),
    },
    368: {
        "newProfileIds": (422,),
    },
    1022: {
        "newProfileIds": (422,),
    },
    1121: {
        "newProfileIds": (422,),
    },
    1122: {
        "newProfileIds": (422,),
    },
    1077: {
        "newProfileIds": (
            47,
            422,
        ),
    },
    1146: {
        "newProfileIds": (51,),
    },
    1124: {
        "newProfileIds": (51,),
    },
    288: {
        "newProfileIds": (
            46,
            61,
        ),
    },
    1123: {
        "newProfileIds": (
            46,
            61,
        ),
    },
    1282: {
        "newProfileIds": (51,),
    },
    1285: {
        "newProfileIds": (51,),
    },
    904: {
        "newProfileIds": (61,),
    },
    905: {
        "newProfileIds": (61,),
    },
    1110: {
        "newProfileIds": (61,),
    },
    1116: {
        "newProfileIds": (46,),
    },
    287: {
        "newProfileIds": (61,),
    },
    170: {
        "newProfileIds": (61,),
    },
    1042: {
        "newProfileIds": (422,),
    },
    1043: {
        "newProfileIds": (422,),
    },
    1040: {
        "newProfileIds": (422,),
    },
    757: {
        "newProfileIds": (422,),
    },
    1041: {
        "newProfileIds": (422,),
    },
    418: {
        "newProfileIds": (73,),
    },
    1099: {
        "newProfileIds": (73,),
    },
    688: {
        "newProfileIds": (61,),
    },
    1172: {
        "newProfileIds": (61,),
    },
    384: {
        "newProfileIds": (73,),
    },
    749: {
        "newProfileIds": (51,),
    },
    1068: {
        "newProfileIds": (61,),
    },
    988: {"accessConditionIds": (ACCESS_CONDITION_INSCRIT_MISSION_LOCALE)},
    992: {"accessConditionIds": (ACCESS_CONDITION_INSCRIT_MISSION_LOCALE)},
    1290: {
        "newProfileIds": (422,),
    },
    748: {
        "newProfileIds": (422,),
    },
    1264: {
        "newProfileIds": (422,),
    },
    292: {
        "newProfileIds": (422,),
    },
    1101: {
        "newProfileIds": (
            47,
            422,
        ),
    },
    1118: {
        "newProfileIds": (422,),
    },
    896: {
        "newProfileIds": (422,),
        "accessConditionIds": (ACCESS_CONDITION_INSCRIT_MISSION_LOCALE),
    },
    1143: {
        "newProfileIds": (422,),
        "accessConditionIds": (ACCESS_CONDITION_INSCRIT_MISSION_LOCALE),
    },
    1119: {
        "newProfileIds": (422,),
    },
    995: {
        "newProfileIds": (422,),
        "accessConditionIds": (ACCESS_CONDITION_INSCRIT_MISSION_LOCALE),
    },
    987: {
        "newProfileIds": (422,),
        "accessConditionIds": (ACCESS_CONDITION_INSCRIT_MISSION_LOCALE),
    },
    902: {
        "newProfileIds": (68,),
    },
    1244: {
        "newProfileIds": (68,),
    },
    1291: {
        "newProfileIds": (
            46,
            68,
        ),
    },
    1001: {
        "newProfileIds": (
            47,
            422,
        ),
    },
    768: {
        "newProfileIds": (73,),
    },
    398: {
        "newProfileIds": (73,),
    },
    1081: {
        "newProfileIds": (73,),
    },
    750: {
        "newProfileIds": (73,),
    },
    880: {
        "newProfileIds": (
            47,
            73,
        ),
    },
    631: {
        "newProfileIds": (61,),
    },
    1014: {
        "newProfileIds": (
            8,
            61,
        ),
    },
    1013: {
        "newProfileIds": (61,),
    },
    1293: {
        "newProfileIds": (1611,),
    },
    343: {
        "newProfileIds": (51,),
    },
    1152: {
        "newProfileIds": (51,),
        "accessConditionIds": (ACCESS_CONDITION_INSCRIT_MISSION_LOCALE),
    },
    1468: {
        "newProfileIds": (51,),
        "accessConditionIds": (ACCESS_CONDITION_INSCRIT_MISSION_LOCALE),
    },
    1153: {
        "newProfileIds": (
            1611,
            61,
        ),
    },
    1120: {
        "newProfileIds": (
            46,
            61,
        ),
    },
    1051: {
        "newProfileIds": (51,),
    },
    1000: {
        "newProfileIds": (
            46,
            61,
        ),
    },
    1232: {
        "newProfileIds": (61,),
        "accessConditionIds": (ACCESS_CONDITION_RESIDENT_QPV_OU_ZRR),
    },
    1171: {
        "newProfileIds": (74,),
    },
    1228: {
        "newProfileIds": (61,),
    },
    1109: {
        "newProfileIds": (51,),
    },
    984: {
        "newProfileIds": (
            46,
            61,
        ),
    },
    1156: {
        "newProfileIds": (51,),
    },
    1265: {
        "newProfileIds": (28,),
    },
    194: {"accessConditionIds": (ACCESS_CONDITION_PERSONNE_NON_IMPOSABLE)},
    979: {
        "newProfileIds": (38,),
    },
    149: {
        "newProfileIds": (1,),
    },
    734: {
        "newProfileIds": (27,),
    },
    101: {
        "newProfileIds": (
            46,
            36,
        ),
    },
    1219: {
        "newProfileIds": (27,),
    },
    1125: {
        "newProfileIds": (27,),
    },
    92: {
        "newProfileIds": (
            46,
            36,
        ),
    },
    348: {
        "newProfileIds": (36,),
    },
    79: {
        "newProfileIds": (6,),
    },
    1223: {
        "newProfileIds": (28,),
    },
    362: {
        "newProfileIds": (28,),
    },
    1258: {
        "newProfileIds": (
            50,
            36,
        ),
    },
    1134: {
        "newProfileIds": (422,),
    },
    1047: {
        "newProfileIds": (61,),
    },
    1044: {
        "newProfileIds": (61,),
    },
    1033: {
        "newProfileIds": (61,),
    },
    358: {"accessConditionIds": (ACCESS_CONDITION_SALARIE_SIAE)},
    1114: {
        "newProfileIds": (51,),
    },
    354: {
        "newProfileIds": (51,),
        "accessConditionIds": (ACCESS_CONDITION_INSCRIT_MISSION_LOCALE),
    },
    1007: {
        "newProfileIds": (420,),
    },
    626: {
        "newProfileIds": (28,),
    },
    193: {
        "newProfileIds": (51,),
        "accessConditionIds": (ACCESS_CONDITION_RESIDENT_QPV_OU_ZRR),
    },
    1142: {
        "newProfileIds": (50,),
    },
    1225: {
        "newProfileIds": (36,),
    },
    350: {
        "newProfileIds": (36,),
    },
    1227: {
        "newProfileIds": (36,),
    },
    627: {
        "newProfileIds": (36,),
    },
    686: {
        "newProfileIds": (28,),
    },
    186: {
        "newProfileIds": (45,),
    },
    359: {
        "newProfileIds": (45,),
    },
    138: {
        "newProfileIds": (36,),
    },
    247: {
        "newProfileIds": (36,),
    },
    246: {
        "newProfileIds": (36,),
    },
    257: {
        "newProfileIds": (
            47,
            422,
        ),
        "accessConditionIds": (ACCESS_CONDITION_INSCRIT_MISSION_LOCALE),
    },
    295: {
        "newProfileIds": (61,),
    },
    1243: {
        "newProfileIds": (50,),
    },
    299: {
        "newProfileIds": (67,),
    },
    887: {
        "newProfileIds": (67,),
    },
    415: {
        "newProfileIds": (50,),
    },
    1027: {
        "newProfileIds": (67,),
    },
    744: {
        "newProfileIds": (46,),
    },
    341: {
        "newProfileIds": (73,),
    },
    930: {
        "newProfileIds": (73,),
    },
    1194: {
        "newProfileIds": (51,),
    },
    753: {
        "newProfileIds": (61,),
    },
    337: {
        "newProfileIds": (51,),
    },
    758: {
        "newProfileIds": (422,),
    },
    1230: {
        "newProfileIds": (422,),
    },
    1018: {
        "newProfileIds": (51,),
    },
    1204: {
        "newProfileIds": (73,),
    },
    1154: {
        "newProfileIds": (
            1611,
            61,
        ),
    },
    276: {
        "newProfileIds": (51,),
    },
    1103: {
        "newProfileIds": (73,),
    },
    1075: {
        "newProfileIds": (73,),
    },
    1117: {
        "newProfileIds": (
            46,
            61,
        ),
    },
    942: {
        "newProfileIds": (61,),
    },
    784: {"accessConditionIds": (ACCESS_CONDITION_ETRE_ELIGIBLE_CRITERES_IAE)},
    340: {
        "newProfileIds": (28,),
    },
    204: {
        "newProfileIds": (46,),
    },
    1257: {
        "newProfileIds": (65,),
    },
    416: {
        "newProfileIds": (52,),
    },
    161: {
        "newProfileIds": (
            65,
            62,
            1615,
        ),
    },
    159: {
        "newProfileIds": (
            65,
            62,
            1615,
        ),
    },
    1164: {
        "newProfileIds": (52,),
    },
    414: {
        "newProfileIds": (52,),
    },
    680: {
        "newProfileIds": (36,),
    },
    681: {
        "newProfileIds": (36,),
    },
    1254: {
        "newProfileIds": (45,),
    },
    1260: {
        "newProfileIds": (52,),
    },
    166: {
        "newProfileIds": (65,),
    },
    1247: {
        "newProfileIds": (67,),
    },
    165: {
        "newProfileIds": (61,),
    },
    1210: {"accessConditionIds": (ACCESS_CONDITION_ETRE_ELIGIBLE_CRITERES_IAE)},
}


def clean_profiles(apps, schema_editor):
    AccessCondition = apps.get_model("services", "AccessCondition")
    Public = apps.get_model("services", "Public")
    Service = apps.get_model("services", "Service")
    ServiceModel = apps.get_model("services", "ServiceModel")

    for old_profile_id, profile_changes in PROFILE_CHANGES.items():
        try:
            with schema_editor.connection.cursor() as cursor:
                cursor.execute("BEGIN")
                try:
                    logger.info("Traitement de l'ancien profil %d", old_profile_id)
                    try:
                        old_profile = Public.objects.get(id=old_profile_id)
                    except Public.DoesNotExist:
                        raise Public.DoesNotExist(
                            f"le profil {old_profile_id} n'existe pas"
                        )

                    services = Service.objects.filter(publics=old_profile)
                    service_models = ServiceModel.objects.filter(publics=old_profile)

                    new_profiles = None
                    access_conditions = None

                    # Récupération des nouveaux profils
                    if "newProfileIds" in profile_changes:
                        logger.info(
                            "Assignation des nouveaux profils %s",
                            profile_changes["newProfileIds"],
                        )
                        new_profiles = Public.objects.filter(
                            id__in=profile_changes["newProfileIds"]
                        )
                        if new_profiles.count() != len(
                            profile_changes["newProfileIds"]
                        ):
                            unfound_profile_ids = set(
                                profile_changes["newProfileIds"]
                            ) - set(new_profiles.values_list("id", flat=True))
                            raise Public.DoesNotExist(
                                f"un ou plusieurs publics concernés non trouvés : {unfound_profile_ids}"
                            )

                    # Récupération des conditions d'accès
                    if "accessConditionIds" in profile_changes:
                        logger.info(
                            "Assignation des conditions d'accès %s",
                            profile_changes["accessConditionIds"],
                        )
                        access_conditions = AccessCondition.objects.filter(
                            id__in=profile_changes["accessConditionIds"]
                        )
                        if access_conditions.count() != len(
                            profile_changes["accessConditionIds"]
                        ):
                            unfound_access_condition_ids = set(
                                profile_changes["accessConditionIds"]
                            ) - set(access_conditions.values_list("id", flat=True))
                            raise AccessCondition.DoesNotExist(
                                f"une ou plusieures conditions d'accès non trouvées : {unfound_access_condition_ids}"
                            )

                    # Assignation des nouveaux profils et conditions d'accès aux services
                    for service in services:
                        service.publics.remove(old_profile)
                        if new_profiles:
                            service.publics.add(*new_profiles)
                        if access_conditions:
                            service.access_conditions.add(*access_conditions)
                        if ACCESS_CONDITION_RESIDENT_QPV_OU_ZRR in profile_changes.get(
                            "accessConditionIds", []
                        ):
                            service.qpv_or_zrr = True
                            service.save()

                    # Assignation des nouveaux profils et conditions d'accès aux modèles de services
                    for service_model in service_models:
                        service_model.publics.remove(old_profile)
                        if new_profiles:
                            service_model.publics.add(*new_profiles)
                        if access_conditions:
                            service_model.access_conditions.add(*access_conditions)
                        if ACCESS_CONDITION_RESIDENT_QPV_OU_ZRR in profile_changes.get(
                            "accessConditionIds", []
                        ):
                            service_model.qpv_or_zrr = True
                            service_model.save()

                    logger.info("Suppression de l'ancien profil %d", old_profile_id)
                    old_profile.delete()

                    cursor.execute("COMMIT")
                except Exception as e:
                    cursor.execute("ROLLBACK")
                    logger.warning(
                        "Une erreur est survenue lors du traitement du profil %d : %s",
                        old_profile_id,
                        str(e),
                    )
                    continue
        except Exception as e:
            logger.error(
                "Erreur de transaction pour le profil %d : %s",
                old_profile_id,
                str(e),
            )
            continue


class Migration(migrations.Migration):
    dependencies = [
        ("services", "0124_rename_concerned_public_service_publics"),
    ]

    operations = [
        migrations.RunPython(clean_profiles, reverse_code=migrations.RunPython.noop),
    ]
