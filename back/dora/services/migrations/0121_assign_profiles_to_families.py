# Generated by Django 5.2.3 on 2025-06-26 13:32

import logging

from data_inclusion.schema.v1.publics import Public
from django.db import migrations

logger = logging.getLogger(__name__)

PROFILES_TO_FAMILIES = {
    1: (Public.ACTIFS),
    2: (Public.JEUNES, Public.ETUDIANTS, Public.ACTIFS),
    3: (Public.ACTIFS),
    4: (),
    5: (Public.FEMMES),
    6: (Public.FAMILLES),
    8: (Public.ACTIFS, Public.DEMANDEURS_EMPLOI, Public.AUTRES),
    9: (Public.DEMANDEURS_EMPLOI, Public.BENEFICIAIRES_DES_MINIMAS_SOCIAUX),
    10: (Public.DEMANDEURS_EMPLOI),
    11: (
        Public.PERSONNES_EN_SITUATION_D_URGENCE,
        Public.PERSONNES_EN_SITUATION_JURIDIQUE_SPECIFIQUE,
    ),
    14: (Public.DEMANDEURS_EMPLOI),
    15: (Public.JEUNES, Public.ETUDIANTS, Public.ACTIFS),
    16: (Public.JEUNES, Public.ETUDIANTS),
    18: (Public.BENEFICIAIRES_DES_MINIMAS_SOCIAUX),
    19: (Public.RESIDENTS_QPV_FRR),
    20: (Public.JEUNES, Public.ETUDIANTS),
    21: (Public.JEUNES, Public.BENEFICIAIRES_DES_MINIMAS_SOCIAUX),
    22: (Public.ACTIFS),
    23: (Public.ETUDIANTS, Public.ACTIFS),
    24: (Public.AUTRES),
    25: (Public.AUTRES),
    26: (Public.BENEFICIAIRES_DES_MINIMAS_SOCIAUX),
    27: (Public.PERSONNES_EN_SITUATION_D_URGENCE),
    28: (Public.PERSONNES_EXILEES),
    29: (
        Public.BENEFICIAIRES_DES_MINIMAS_SOCIAUX,
        Public.PERSONNES_EN_SITUATION_DE_HANDICAP,
    ),
    30: (Public.DEMANDEURS_EMPLOI),
    31: (Public.ACTIFS),
    32: (Public.DEMANDEURS_EMPLOI),
    33: (),
    34: (Public.JEUNES, Public.PERSONNES_EN_SITUATION_JURIDIQUE_SPECIFIQUE),
    35: (Public.PERSONNES_EN_SITUATION_DE_HANDICAP),
    36: (Public.SENIORS),
    37: (Public.AUTRES),
    38: (Public.FAMILLES),
    39: (),
    40: (Public.DEMANDEURS_EMPLOI),
    41: (Public.DEMANDEURS_EMPLOI),
    42: (Public.ETUDIANTS),
    43: (Public.ETUDIANTS),
    45: (Public.DEMANDEURS_EMPLOI, Public.ACTIFS),
    46: (Public.PERSONNES_EN_SITUATION_DE_HANDICAP),
    47: (Public.JEUNES),
    48: (Public.AUTRES),
    50: (Public.DEMANDEURS_EMPLOI),
    51: (Public.JEUNES),
    52: (Public.ACTIFS),
    53: (),
    54: (Public.ACTIFS),
    56: (Public.SENIORS),
    58: (Public.PERSONNES_EN_SITUATION_DE_HANDICAP),
    60: (Public.PERSONNES_EN_SITUATION_DE_HANDICAP),
    61: (Public.JEUNES),
    62: (Public.ACTIFS),
    63: (),
    64: (Public.ACTIFS),
    65: (Public.ACTIFS),
    66: (Public.FAMILLES),
    67: (Public.FAMILLES),
    68: (Public.JEUNES),
    69: (Public.ETUDIANTS),
    70: (Public.JEUNES),
    71: (Public.DEMANDEURS_EMPLOI),
    72: (Public.RESIDENTS_QPV_FRR),
    73: (Public.JEUNES),
    74: (Public.JEUNES),
    75: (Public.JEUNES, Public.FAMILLES),
    76: (Public.PERSONNES_EN_SITUATION_DE_HANDICAP),
    77: (Public.JEUNES),
    420: (Public.SENIORS),
    422: (Public.JEUNES),
    423: (Public.AUTRES),
    424: (Public.PERSONNES_EN_SITUATION_DE_HANDICAP),
    425: (Public.PERSONNES_EN_SITUATION_DE_HANDICAP),
    426: (Public.PERSONNES_EN_SITUATION_D_URGENCE),
    427: (Public.PERSONNES_EN_SITUATION_DE_HANDICAP),
    791: (Public.AUTRES),
    792: (Public.FEMMES),
    793: (Public.AUTRES),
    1607: (Public.DEMANDEURS_EMPLOI),
    1608: (Public.DEMANDEURS_EMPLOI),
    1610: (Public.BENEFICIAIRES_DES_MINIMAS_SOCIAUX),
    1611: (Public.PERSONNES_EN_SITUATION_DE_HANDICAP),
    1612: (Public.ACTIFS),
    1613: (Public.ACTIFS),
    1614: (Public.PERSONNES_EN_SITUATION_JURIDIQUE_SPECIFIQUE),
    1615: (Public.ACTIFS),
    1616: (Public.ACTIFS),
    1617: (Public.BENEFICIAIRES_DES_MINIMAS_SOCIAUX),
    1618: (Public.PERSONNES_EN_SITUATION_JURIDIQUE_SPECIFIQUE),
}


def assign_families_to_profiles(apps, _schema_editor):
    ConcernedPublic = apps.get_model("services", "ConcernedPublic")

    for profile_id, families in PROFILES_TO_FAMILIES.items():
        try:
            profile = ConcernedPublic.objects.get(id=profile_id)
            profile.families.set(families)
            profile.save()
        except ConcernedPublic.DoesNotExist:
            logger.error("Le profil %d n'a pas été trouvé", profile_id)


class Migration(migrations.Migration):
    dependencies = [
        ("services", "0120_clean_profiles"),
    ]

    operations = [
        migrations.RunPython(
            assign_families_to_profiles, reverse_code=migrations.RunPython.noop
        ),
    ]
