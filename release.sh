#!/usr/bin/env bash

set -e
set -o pipefail

# Variables globales
CURRENT_DIR=$(pwd)
MERGE_COMMIT_MESSAGE="MEP $(date +'%d.%m.%Y') : Merge branch 'main' into release"
GIT_BACK_END_URL=git@github.com:gip-inclusion/dora-back.git
GIT_FRONT_END_URL=git@github.com:gip-inclusion/dora-front.git

# Couleurs ANSI
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[0;33m'
BLUE='\033[0;34m'
CYAN='\033[0;36m'
NC='\033[0m' # No Color (reset)

# V√©rifier qu'un argument est pass√©
if [ "$#" -ne 1 ]; then
  echo ""
  echo -e "${RED}‚ùå Argument manquant${NC}"
  echo "Usage: $0 {back|front|all}"
  echo ""
  exit 1
fi

# Fonction pour g√©rer le processus de d√©ploiement
deploy_repo() {
  local repo_url=$1
  local repo_name=$2
  
  echo -e "${CYAN}üì¶ D√©ploiement de l'application ${repo_name}${NC}"

  echo "Clonage du d√©p√¥t $repo_name..."
  git clone "$repo_url"

  cd "$repo_name"

  echo "R√©cup√©ration des branches distantes pour $repo_name..."
  git fetch --all

  echo "Changement de branche vers release..."
  git switch release

  # V√©rifier s'il y a des commits d'√©cart entre 'main' et 'release'
  COMMITS_DIFF=$(git rev-list --count release..main)

  if [ "$COMMITS_DIFF" -gt 0 ]; then
    echo "Il y a $COMMITS_DIFF commit(s) d'√©cart entre 'main' et 'release' pour $repo_name. Lancement du merge..."
    
    echo "Merge de la branche main dans release pour $repo_name..."
    if ! git merge --no-ff main -m "$MERGE_COMMIT_MESSAGE"; then
      echo "‚ö†Ô∏è Conflit lors du merge de la branche main dans release pour $repo_name. Veuillez r√©soudre manuellement."
      exit 1
    fi

    echo "Pouss√©e des changements vers le d√©p√¥t distant pour $repo_name..."
    git push

    echo "‚úÖ La branche 'release' du repository $repo_name a √©t√© mise √† jour"
  else
    echo "üôÖ Pas de commits √† merger entre 'main' et 'release' pour $repo_name. Aucun merge effectu√©."
  fi

  # Revenir au r√©pertoire temporaire
  cd ..
  echo ""
}

# D√©but
echo ""
echo -e "${YELLOW}üöÄ D√©marrage de la proc√©dure de livraison${NC}"
echo ""

# Cr√©ation d'un r√©pertoire temporaire
TEMP_DIR=$(mktemp -d)
echo "‚ú® Cr√©ation d'un r√©pertoire temporaire pour le travail : $TEMP_DIR"
cd "$TEMP_DIR"
echo ""

# Gestion des arguments
case "$1" in
  back)
    deploy_repo "$GIT_BACK_END_URL" "dora-back"
    ;;
  front)
    deploy_repo "$GIT_FRONT_END_URL" "dora-front"
    ;;
  all)
    deploy_repo "$GIT_BACK_END_URL" "dora-back"
    deploy_repo "$GIT_FRONT_END_URL" "dora-front"
    ;;
  *)
    echo "Argument invalide : $1"
    echo "Usage: $0 {back|front|both}"
    exit 1
    ;;
esac

# Nettoyage
echo "üßπ Nettoyage : retour au r√©pertoire initial et suppression du r√©pertoire temporaire."
cd "$CURRENT_DIR"
rm -rf "$TEMP_DIR"
echo ""

# Fin
echo -e "${GREEN}üéâ Fin de la proc√©dure de livraison${NC}"
echo ""